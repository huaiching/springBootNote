4. StringBuilder 高性能的字串處理器
 String 和 StringBuilder 的差異比較
        String StringBuilder
可變性 不可變，每次修改時創建新的物件 可變，修改不創建新物件
字串拼接 使用「+」進行拼接           使用「append(...)」進行拼接
效能     性能較差                   性能較高
轉換為String 直接是String 類型      需要使用toString()轉換為 String

 StringBuilder 的 常用 方 法
A. a ppend(String str):
將 指定的字符串追加到 末尾
範例
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
// sb 現在是 "Hello
B. insert(int offset, String str):
在 指定位置插入字符串
範例
StringBuilder sb = new StringBuilder("Hello World");
sb.i
nsert(5, " Java"); // sb 現在是 "Hello Java
C. delete(int start, int end):
刪除從 start 索引到 end 索引的字符（不包含 end
範例
Stri
ngBuilder sb = new StringBuilder("Hello World");
sb.replace(6, 11, "Java");
// sb 現在是 "Hello
D. replace(int start, int end, String str):
用指 定的字符串替換從 start 到 end 索引的字符
範例
StringBuilder sb = new StringBuilder("Hello World");
sb.replace(6, 11, "Java");
// sb 現在是 "Hello
E. toString():
將 StringBuilder 轉換為 String
範例
StringBuilde
r sb = new StringBuilder("Hello");
String str = sb.toString();
// str 是 "He llo"
F. length():
返回 StringBuilder 目前的字符長度
範例
StringBuilder sb = new StringBuilder("Hello");
System.out.println(sb.length());
// 輸出 5
